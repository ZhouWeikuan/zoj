#include<iostream>
#include<vector>
using namespace std;

int prime[40];
int visit[24];
vector<int> table[24];
int stack[24];
int top;
int num;

void init(){
	prime[2]= 1; 	prime[3]= 1;	prime[5]= 1;	prime[7]= 1;
	prime[11]= 1;	prime[13]= 1;	prime[17]= 1;	prime[19]= 1;
	prime[23]= 1;	prime[29]= 1;	prime[31]= 1;	prime[37]= 1;
	int i,j;
	for(i=1;i<20;i++){
		for(j=i+1;j<20;j++){
			if(prime[i+j]){
				table[i].push_back(j);
				table[j].push_back(i);
			}
		}
	}
}
void dfs(int deep, int v){
	int i,t;
	if(deep == num){
		if(prime[stack[top-1] + 1]==0){
			return;
		}
		printf("%d", stack[0]);
		for(i=1;i<top;i++){
			printf(" %d", stack[i]);
		}
		printf("\n");
		return;
	}
	for(i=0;i<table[v].size() && table[v][i] <=num; i++){
		t = table[v][i];
		if(visit[t] ==1)
			continue;
		visit[t] = 1;
		stack[top++] = t;
		dfs(deep+1,t);
		--top;
		visit[t] = 0;
	}
}

void fun(){
	memset(visit,0,sizeof(visit));
	top = 0;
	stack[top++] = 1;
	visit[1] = 1;
	int i,t;
	for(i=0;i< table[1].size()&&table[1][i] <=num;i++){
		t= table[1][i];
		visit[t] = 1;
		stack[top++] = t;
		dfs(2,t);
		--top;
		visit[t] = 0;
	}
}

void predo(){
	switch(num){
		case 2:
			printf("1 2\n");
		break;
		case 4:
			printf("1 2 3 4\n1 4 3 2\n");
		break;
		case 6:
			printf("1 4 3 2 5 6\n1 6 5 2 3 4\n");
		break;
		case 8:
			printf("1 2 3 8 5 6 7 4\n1 2 5 8 3 4 7 6\n1 4 7 6 5 8 3 2\n1 6 7 4 3 8 5 2\n");
		break;
		case 10:
			printf(	"1 2 3 4 7 6 5 8 9 10\n"
					"1 2 3 4 7 10 9 8 5 6\n"
"1 2 3 4 9 8 5 6 7 10\n"
"1 2 3 8 5 6 7 4 9 10\n"
"1 2 3 8 5 6 7 10 9 4\n"
"1 2 3 10 7 4 9 8 5 6\n"
"1 2 3 10 7 6 5 8 9 4\n"
"1 2 3 10 9 8 5 6 7 4\n"
"1 2 5 6 7 4 3 8 9 10\n"
"1 2 5 6 7 4 9 8 3 10\n"
"1 2 5 6 7 10 3 8 9 4\n"
"1 2 5 6 7 10 9 8 3 4\n"
"1 2 5 8 3 4 9 10 7 6\n"
"1 2 5 8 3 10 9 4 7 6\n"
"1 2 5 8 9 4 3 10 7 6\n"
"1 2 5 8 9 10 3 4 7 6\n"
"1 2 9 4 3 8 5 6 7 10\n"
"1 2 9 4 7 6 5 8 3 10\n"
"1 2 9 4 7 10 3 8 5 6\n"
"1 2 9 8 5 6 7 4 3 10\n"
"1 2 9 8 5 6 7 10 3 4\n"
"1 2 9 10 3 8 5 6 7 4\n"
"1 2 9 10 7 4 3 8 5 6\n"
"1 2 9 10 7 6 5 8 3 4\n"
"1 4 3 2 5 8 9 10 7 6\n"
"1 4 3 2 9 8 5 6 7 10\n"
"1 4 3 8 5 2 9 10 7 6\n"
"1 4 3 8 5 6 7 10 9 2\n"
"1 4 3 8 9 2 5 6 7 10\n"
"1 4 3 8 9 10 7 6 5 2\n"
"1 4 3 10 7 6 5 8 9 2\n"
"1 4 7 6 5 2 3 8 9 10\n"
"1 4 7 6 5 2 9 8 3 10\n"
"1 4 7 6 5 8 3 2 9 10\n"
"1 4 7 6 5 8 3 10 9 2\n"
"1 4 7 6 5 8 9 2 3 10\n"
"1 4 7 6 5 8 9 10 3 2\n"
"1 4 7 10 3 2 9 8 5 6\n"
"1 4 7 10 3 8 9 2 5 6\n"
"1 4 7 10 9 2 3 8 5 6\n"
"1 4 7 10 9 8 3 2 5 6\n"
"1 4 9 2 3 8 5 6 7 10\n"
"1 4 9 2 5 8 3 10 7 6\n"
"1 4 9 8 3 2 5 6 7 10\n"
"1 4 9 8 3 10 7 6 5 2\n"
"1 4 9 8 5 2 3 10 7 6\n"
"1 4 9 8 5 6 7 10 3 2\n"
"1 4 9 10 7 6 5 8 3 2\n"
"1 6 5 2 3 8 9 4 7 10\n"
"1 6 5 2 3 8 9 10 7 4\n"
"1 6 5 2 9 8 3 4 7 10\n"
"1 6 5 2 9 8 3 10 7 4\n"
"1 6 5 8 3 2 9 4 7 10\n"
"1 6 5 8 3 2 9 10 7 4\n"
"1 6 5 8 3 4 7 10 9 2\n"
"1 6 5 8 3 10 7 4 9 2\n"
"1 6 5 8 9 2 3 4 7 10\n"
"1 6 5 8 9 2 3 10 7 4\n"
"1 6 5 8 9 4 7 10 3 2\n"
"1 6 5 8 9 10 7 4 3 2\n"
"1 6 7 4 3 2 5 8 9 10\n"
"1 6 7 4 3 8 5 2 9 10\n"
"1 6 7 4 3 10 9 8 5 2\n"
"1 6 7 4 9 2 5 8 3 10\n"
"1 6 7 4 9 8 5 2 3 10\n"
"1 6 7 4 9 10 3 8 5 2\n"
"1 6 7 10 3 2 5 8 9 4\n"
"1 6 7 10 3 4 9 8 5 2\n"
"1 6 7 10 3 8 5 2 9 4\n"
"1 6 7 10 9 2 5 8 3 4\n"
"1 6 7 10 9 4 3 8 5 2\n"
"1 6 7 10 9 8 5 2 3 4\n"
"1 10 3 2 5 8 9 4 7 6\n"
"1 10 3 2 9 8 5 6 7 4\n"
"1 10 3 4 7 6 5 8 9 2\n"
"1 10 3 8 5 2 9 4 7 6\n"
"1 10 3 8 5 6 7 4 9 2\n"
"1 10 3 8 9 2 5 6 7 4\n"
"1 10 3 8 9 4 7 6 5 2\n"
"1 10 7 4 3 2 9 8 5 6\n"
"1 10 7 4 3 8 9 2 5 6\n"
"1 10 7 4 9 2 3 8 5 6\n"
"1 10 7 4 9 8 3 2 5 6\n"
"1 10 7 6 5 2 3 8 9 4\n"
"1 10 7 6 5 2 9 8 3 4\n"
"1 10 7 6 5 8 3 2 9 4\n"
"1 10 7 6 5 8 3 4 9 2\n"
"1 10 7 6 5 8 9 2 3 4\n"
"1 10 7 6 5 8 9 4 3 2\n"
"1 10 9 2 3 8 5 6 7 4\n"
"1 10 9 2 5 8 3 4 7 6\n"
"1 10 9 4 7 6 5 8 3 2\n"
"1 10 9 8 3 2 5 6 7 4\n"
"1 10 9 8 3 4 7 6 5 2\n"
"1 10 9 8 5 2 3 4 7 6\n"
"1 10 9 8 5 6 7 4 3 2\n");
			break;
		default:
			fun();
	}
}

int main(){
	int tstcase = 0;
	init();
	int t;

	while(cin>>t){
		printf("Case %d:\n", ++tstcase);
		if(t%2==1){
			;
		} else {
			num = t;
			predo();
		}
		printf("\n");
	}

	return 0;
}
